!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	src/operations.h	/^#define A /;"	d
AF	src/operations.h	/^#define AF /;"	d
B	src/operations.h	/^#define B /;"	d
BC	src/operations.h	/^#define BC /;"	d
BLU	lib/termColors.h	/^#define BLU /;"	d
C	Makefile	/^C=gcc$/;"	m
C	src/operations.h	/^#define C /;"	d
CCFLAGS	Makefile	/^CCFLAGS=-c$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Wall -std=c99$/;"	m
CPL	src/operations.c	/^void CPL(CPU *cpu) {$/;"	f
CPU	src/cpu.h	/^typedef struct CPU {$/;"	s
CPU	src/cpu.h	/^} CPU;$/;"	t	typeref:struct:CPU
CPU_H	src/cpu.h	/^#define CPU_H$/;"	d
CYN	lib/termColors.h	/^#define CYN /;"	d
D	src/operations.h	/^#define D /;"	d
DE	src/operations.h	/^#define DE /;"	d
E	src/operations.h	/^#define E /;"	d
EXITPATH	lib/common.h	/^#define EXITPATH /;"	d
GRN	lib/termColors.h	/^#define GRN /;"	d
H	src/operations.h	/^#define H /;"	d
HL	src/operations.h	/^#define HL /;"	d
L	src/operations.h	/^#define L /;"	d
MAG	lib/termColors.h	/^#define MAG /;"	d
NOP	src/operations.c	/^void NOP() {$/;"	f
OBJECTS	Makefile	/^OBJECTS=main.o cpu.o operations.o common.o$/;"	m
OPERATIONS_H	src/operations.h	/^#define OPERATIONS_H$/;"	d
Opcode	src/operations.h	/^typedef struct Opcode {$/;"	s
Opcode	src/operations.h	/^} Opcode;$/;"	t	typeref:struct:Opcode
RALU	src/operations.c	/^void RALU(CPU *cpu, int index, int16_t* rptr) {$/;"	f
RED	lib/termColors.h	/^#define RED /;"	d
RESET	lib/termColors.h	/^#define RESET /;"	d
SP	src/operations.h	/^#define SP /;"	d
SRCPATH	Makefile	/^SRCPATH=.\/src\/$/;"	m
TITLEPATH	lib/common.h	/^#define TITLEPATH /;"	d
WHT	lib/termColors.h	/^#define WHT /;"	d
YEL	lib/termColors.h	/^#define YEL /;"	d
a	src/cpu.h	/^  int16_t a;$/;"	m	struct:CPU
b	src/cpu.h	/^  int16_t b;$/;"	m	struct:CPU
c	src/cpu.h	/^  int16_t c;$/;"	m	struct:CPU
d	src/cpu.h	/^  int16_t d;$/;"	m	struct:CPU
decodeOpCode	src/cpu.c	/^void decodeOpCode(CPU *cpu, unsigned char const *cart) {$/;"	f
e	src/cpu.h	/^  int16_t e;$/;"	m	struct:CPU
exec	src/operations.c	/^void exec(Opcode op, CPU *cpu,  unsigned char const *cart) {$/;"	f
f	src/cpu.h	/^  int16_t f; $/;"	m	struct:CPU
getByte	src/cpu.c	/^unsigned char getByte(unsigned char const *cart, int16_t addr) {$/;"	f
getNN	src/cpu.c	/^int getNN(unsigned char const* cart, int16_t addr) {$/;"	f
getRegister	src/cpu.c	/^int16_t* getRegister(CPU *cpu, int index) {$/;"	f
h	src/cpu.h	/^  int16_t h;$/;"	m	struct:CPU
l	src/cpu.h	/^  int16_t l;$/;"	m	struct:CPU
ld	src/operations.c	/^void ld(unsigned char reg, int16_t value) {$/;"	f
loadCart	src/cpu.c	/^unsigned char* loadCart(char const *cartPath, unsigned int* cartSize) {$/;"	f
main	src/main.c	/^int main(int argc, char** argv) {$/;"	f
p	src/operations.h	/^  unsigned char p;$/;"	m	struct:Opcode
panic	lib/common.c	/^void panic(char const *message) {$/;"	f
pc	src/cpu.h	/^  int16_t pc;$/;"	m	struct:CPU
printCard	src/main.c	/^void printCard(char* messagePath) {$/;"	f
printCart	src/cpu.c	/^void printCart(int start, unsigned char const *cart) {$/;"	f
printCpu	src/cpu.c	/^void printCpu(CPU cpu) {$/;"	f
printOp	src/operations.c	/^void printOp(Opcode op){$/;"	f
q	src/operations.h	/^  unsigned char q;$/;"	m	struct:Opcode
r	src/operations.c	/^const char r[] = {B, C, D, E, H, L, HL, A};$/;"	v
rp	src/operations.c	/^const char rp[] = {BC, DE, HL, SP};$/;"	v
rp2	src/operations.c	/^const char rp2[] = {BC, DE, HL, AF};$/;"	v
run_cycle	src/cpu.c	/^void run_cycle(CPU *cpu, unsigned char const *cart, unsigned int const cartSize) {$/;"	f
sp	src/cpu.h	/^  int16_t sp;$/;"	m	struct:CPU
usage	src/main.c	/^void usage() {$/;"	f
x	src/operations.h	/^  unsigned char x;$/;"	m	struct:Opcode
y	src/operations.h	/^  unsigned char y;$/;"	m	struct:Opcode
z	src/operations.h	/^  unsigned char z;$/;"	m	struct:Opcode
